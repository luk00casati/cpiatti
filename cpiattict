#!/bin/python3
string_in:str = """GETS "ciao" ROT POP POP POP POP"""
string_out:list = []
open_brackets:int = 0
closed_breackets:int = 0
n_loop:int = 0
n_for_loop:int = 0
alias_list:list = []
debug = True

start_header:str = """
#include <cpiatti.h>
#include <stdio.h>
#include <stdlib.h>
"""

middle_header:str = """
void code(){
init_stack();
"""

end_header:str = """
}

int main(){
    code();
    return 0;
}
"""

split_str = string_in.split(' ')
split_str = list(filter(lambda x: x != '', split_str))
if debug:
    print(split_str)
iterator = iter(split_str)

std_noarg_function = {
    "POP": "pop();",
    "GETC": "sgetc();",
    "GETI": "sgeti();",
    "STPOP": "stpop();",
    "ROT": "rot();",
    "PUT": "put();",
    "APUT": "aput();",
    "COPY": "copy();",
    "SWAP": "swap();",
    "SUB": "sub();",
    "SUM": "sum();",
    "MUL": "mul();",
    "DIV": "sdiv();",
    "REM": "rem();",
    "DROP": "drop();",
    "STPEEK": "stpeek();"
}

for word in iterator:
    if word == "PUSH":
        try:
            value = next(iterator)
            if value.isdigit():
                string_out.append(f"push({value});")
            elif value == "SIZE":
                string_out.append("push(stack.size);")
            elif value == "STORE":
                string_out.append("push(stack.store);")
            else:
                print("Error: PUSH requires a valid value.")
                exit(1)
        except StopIteration:
            print("Error: PUSH requires a value.")
            exit(1)

    elif word == "GETS":
        try:
            string = next(iterator)
            if len(string) > 2 and string[0] == '"' and string[-1] == '"' and string.count('"') == 2:
                string_out.append(f"sgets({string});")
            else:
               print("Error: GETS requires a valid string.")
               exit(1) 
        except StopIteration:
            print("Error: GETS requires a string.") 
            exit(1)

    elif word in std_noarg_function:
        string_out.append(std_noarg_function[word])

    elif word[0] == '#':
        #comment
        pass

    elif word == '}':
        closed_breackets += 1
        if debug:
            print('}')
        string_out.append('}')

    else:
        print(f"error synthax {word}")
        exit(1)

if debug:
    for i in string_out:
        print(i)