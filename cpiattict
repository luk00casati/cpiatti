#!/bin/python3

def cpiatti_transpier(source:str, out:str = "out.c"):
    string_out:list = []

    with open(source, "r") as readfile:
        string_in = readfile.read()

    start_header:str = """
    #include <cpiatti.h>
    #include <stdio.h>
    #include <stdlib.h>
    #include <signal.h>

    void code(){
    init_stack();
    """

    end_header:str = """
    }

    void handle_signal(){
        deinit_stack();
        printf("\\nBREAK\\n");
        exit(0);
    }

    int main(){
        signal(SIGINT, handle_signal);
        code();
        deinit_stack();
        return 0;
    }
    """
    split_str = string_in.split()
    filtred_split_str = list(filter(lambda x: x != '', split_str))
    iterator = iter(filtred_split_str)

    std_noarg_function = {
        "POP": "pop();",
        "GETC": "sgetc();",
        "GETI": "sgeti();",
        "STPOP": "stpop();",
        "ROT": "rot();",
        "PUT": "put();",
        "APUT": "aput();",
        "COPY": "copy();",
        "SWAP": "swap();",
        "SUB": "sub();",
        "SUM": "sum();",
        "MUL": "mul();",
        "DIV": "sdiv();",
        "REM": "rem();",
        "DROP": "drop();",
        "STPEEK": "stpeek();"
    }

    compare_symbol = ["==", "<=", ">=", '<', '>', "!="]

    def get_arg_string(arg, name):
        if arg.isdigit():
            return arg
        elif arg == "SIZE":
            return "stack.size"
        elif arg == "STORE":
            return "stack.store"
        else:
            print(f"error {name} value not valid: " + arg)
            exit(1)

    for word in iterator:
        if word == "PUSH":
            try:
                value = next(iterator)

                value_str = get_arg_string(value, "PUSH")

                string_out.append(f"push({value_str});")

            except StopIteration:
                print("Error: PUSH requires a value.")
                exit(1)

        elif word == "GETS":
            try:
                string = next(iterator)
                if len(string) > 2 and string[0] == '"' and string[-1] == '"' and string.count('"') == 2:
                    string_out.append(f"sgets({string});")
                else:
                    print("Error: GETS requires a valid string.")
                    exit(1) 
            except StopIteration:
                print("Error: GETS requires a string.") 
                exit(1)

        elif word in std_noarg_function:
            string_out.append(std_noarg_function[word])

        elif word.islower():
            #comment
            pass

        elif word == "LOOP":
            try:
                bracket = next(iterator)
                if bracket == '{':
                    string_out.append("while (1) {")
                else:
                    print("Error: LOOP missing {")
                    exit(1)
            except StopIteration:
                print("Error: LOOP missing {")
                exit(1)

        elif word == "REPEAT":
            try:
                value = next(iterator)

                value_str = get_arg_string(value, "REPEAT")

                bracket = next(iterator)
                if bracket == '{':
                    string_out.append(f"int s = {value_str};")
                    string_out.append("for (size_t i = 0; i < s; i++) {")
                else:
                    print("Error: REPEAT requires a valid value.")
                    exit(1)
            except StopIteration:
                print("Error: REPEAT requires a value.")
                exit(1)

        elif word == "EXIT":
            try:
                value = next(iterator)

                value_str = get_arg_string(value, "EXIT")

                if value.isdigit():
                    string_out.append(f"deinit_stack();\nexit({value_str});")
                else:
                    print("Error: EXIT requires a valid value.")
                    exit(1)
            except StopIteration:
                print("Error: EXIT requires a value.")
                exit(1)

        elif word == "IF":
            try:
                arg1 = next(iterator)
                comparator = next(iterator)
                arg2 = next(iterator)

                arg1_str = get_arg_string(arg1, "IF ARG1")
                arg2_str = get_arg_string(arg2, "IF ARG2")

                if comparator in compare_symbol:
                    string_out.append(f"if ({arg1_str} {comparator} {arg2_str}) {{")
                else:
                    print("Error: IF requires a valid comparator.")
                    exit(1)

            except StopIteration:
                print("Error: IF requires three arguments.")
                exit(1)

        elif word == "ELSE":
            try:
                bracket = next(iterator)
                if bracket == '{':
                    string_out.append("else {")
                else:
                    print("Error: ELSE missing {")
                    exit(1)
            except StopIteration:
                print("Error: ELSE missing {")
                exit(1)

        elif word == '}':
            string_out.append('}')

        elif word == '{':
            pass

        else:
            print(f"error synthax {word}")
            print(string_in)
            exit(1)

    if string_in.count('{') != string_in.count('}'):
        print("Error: Mismatched number of open and closed brackets.")
        exit(1)

    with open(out, "w") as writefile:
        writefile.write(start_header)
        writefile.writelines("\n".join(string_out))
        writefile.writelines(end_header)

if __name__ == "__main__":
    import sys

    lenght = len(sys.argv)
    if lenght < 2:
        print("need at least one argument!")
    elif lenght > 3:
        print("too many argumnts!")
    elif lenght == 2:
        cpiatti_transpier(sys.argv[1])
    elif lenght == 3:
        cpiatti_transpier(sys.argv[1], out=sys.argv[2])